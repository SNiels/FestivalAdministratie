<UserControl
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:View="clr-namespace:FestivalAdministratie.View"
             xmlns:ViewModel="clr-namespace:FestivalAdministratie.ViewModel"
            xmlns:Converter="clr-namespace:FestivalAdministratie.Converter"
             xmlns:xwpf="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" x:Class="FestivalAdministratie.View.Tickets"
             mc:Ignorable="d" 
             d:DesignHeight="1000" d:DesignWidth="1000"
    x:Name="ticketsRoot">
    <UserControl.Resources>
        <Converter:StringToevoegenConverter x:Key="StringToevoegenConverter"/>
        <Style x:Key="TicketTypeCbo" TargetType="{x:Type ComboBox}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                    <Border x:Name="DropDownBorder" BorderBrush="{DynamicResource ComboBoxPopupBorderThemeBrush}" BorderThickness="{DynamicResource ComboBoxPopupBorderThemeThickness}" Background="{DynamicResource ComboBoxPopupBackgroundThemeBrush}">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="30"/>
                                            </Grid.RowDefinitions>
                                            <ScrollViewer x:Name="DropDownScrollViewer" Grid.Row="0">
                                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                                    </Canvas>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                                                </Grid>
                                            </ScrollViewer>
                                            <Button Command="{Binding OpenDialogCommand}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="Nieuw type" Grid.Row="1" Margin="0"/>
                                        </Grid>
                                    </Border>
                                </Themes:SystemDropShadowChrome>
                            </Popup>
                            <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                        <Setter Property="IsTabStop" Value="False"/>
                                        <Setter Property="Focusable" Value="False"/>
                                        <Setter Property="ClickMode" Value="Press"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                                        <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="True" Width="32">
                                                            <TextBlock x:Name="Arrow" Foreground="{DynamicResource ComboBoxArrowForegroundThemeBrush}" FontWeight="Bold" FontSize="{DynamicResource ComboBoxArrowThemeFontSize}" FontFamily="{DynamicResource SymbolThemeFontFamily}" HorizontalAlignment="Right" IsHitTestVisible="False" Margin="0,0,6,4" Text="&#xE011;" VerticalAlignment="Center"><Run Text="&#xE011;"/></TextBlock>
                                                        </Border>
                                                    </Border>
                                                    <ControlTemplate.Triggers>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Foreground" TargetName="Arrow" Value="{DynamicResource ComboBoxArrowPressedForegroundThemeBrush}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsEnabled" Value="False">
                                                            <Setter Property="Foreground" TargetName="Arrow" Value="{DynamicResource ComboBoxArrowDisabledForegroundThemeBrush}"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="Stretch" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="True"/>
                            <Trigger Property="HasItems" Value="False">
                                <Setter Property="Height" TargetName="PART_Popup" Value="100"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsGrouping" Value="True"/>
                                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                                </MultiTrigger.Conditions>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{DynamicResource ComboBoxDisabledBackgroundThemeBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxDisabledBorderThemeBrush}"/>
                                <Setter Property="Foreground" Value="{DynamicResource ComboBoxDisabledForegroundThemeBrush}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource ComboBoxPointerOverBackgroundThemeBrush}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxPointerOverBorderThemeBrush}"/>
                            </Trigger>
                            <Trigger Property="CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemsSource" Value="{Binding DataContext.TicketTypes, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type View:Tickets}}}"/>
            <Setter Property="DisplayMemberPath" Value="Name"/>
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate >
                        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="10"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Text="{Binding Name}"/>
                            <!-- aanpassen en verwijderen-->
                        </Grid>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--<Style x:Key="EditTicketTypeCbo" TargetType="ComboBox">
            --><!--<Setter Property="Text" Value="{Binding DataContext.NewTicketType, UpdateSourceTrigger=LostFocus, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type View:Tickets}}}"/>-->
            <!--<Setter Property="IsEditable" Value="True"/>--><!--
            
        </Style>-->
    </UserControl.Resources>
    <Grid Background="#FFE5E5E5">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="180"/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>

            <RowDefinition Height="50"/>
            <RowDefinition Height="50"/>
            <RowDefinition Height="50"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <ComboBox IsEnabled="{Binding IsTypesEnabled}" Style="{StaticResource TicketTypeCbo}" x:Name="TicketTypeCbo" SelectedItem="{Binding SelectedTicketType}" Margin="10,10,10,10" Height="30"/>
        <!--Style="{DynamicResource TicketTypeCbo}"-->
        <Label Content="Hoeveelheid:" HorizontalAlignment="Left" Margin="5,10,0,10" Grid.Row="1"/>
        <Label Content="Verkocht:" Grid.Column="0" HorizontalAlignment="Left" Margin="5,10,0,10" Grid.Row="2"/>
        <Label Content="Beschikbaar:" Grid.Column="0" HorizontalAlignment="Left" Margin="5,10,0,10" Grid.Row="3"/>
        <xwpf:IntegerUpDown IsEnabled="{Binding IsATypeSelected}" Minimum="{Binding SelectedTicketType.TicketsSold}" Value="{Binding SelectedTicketType.AmountOfTickets,NotifyOnValidationError=True}" x:Name="txbHoeveelheid" Margin="0,10,10,10" Grid.Row="1"  HorizontalAlignment="Right" Width="67"/>
        <Label Content="Reservering" Grid.Column="1" HorizontalAlignment="Left" Margin="10,10,0,5" Width="117"/>
        <Button Command="{Binding OpenDialogCommand}" IsEnabled="{Binding IsTicketsEnabled}" Content="Beheer type tickets" Grid.Column="1" Margin="0,10,170,10" HorizontalAlignment="Right" Width="150"/>
        <Button Command="{Binding AddReservationCommand}" IsEnabled="{Binding IsTicketsEnabled}" Content="Nieuwe reservering" Grid.Column="1" Margin="0,10,10,10" HorizontalAlignment="Right" Width="150"/>
        <DataGrid IsEnabled="{Binding IsTicketsEnabled}" AutoGenerateColumns="False" Grid.Column="1" Margin="10,0,10,10" Grid.Row="1" Grid.RowSpan="5" ItemsSource="{Binding Tickets}" GridLinesVisibility="All" BorderThickness="2">
            <DataGrid.Columns>
                <DataGridTextColumn MinWidth="60" Header="Naam" Binding="{Binding TicketHolder,ValidatesOnDataErrors=True}">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="DataGridCell.ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self},
                                                Path=(Validation.Errors)[0].ErrorContent}"/>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn MinWidth="60" Header="Email" Foreground="Black" Binding="{Binding TicketHolderEmail,ValidatesOnDataErrors=True}">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="DataGridCell.ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self},
                                                Path=(Validation.Errors)[0].ErrorContent}"/>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridComboBoxColumn SelectedItemBinding="{Binding Type}" DisplayMemberPath="Name" MinWidth="90" Header="Type">
                    <DataGridComboBoxColumn.ElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding DataContext.TicketTypes, ElementName=ticketsRoot}" />
                        </Style>
                    </DataGridComboBoxColumn.ElementStyle>
                    <DataGridComboBoxColumn.EditingElementStyle>
                        <Style TargetType="{x:Type ComboBox}">
                            <Setter Property="ItemsSource" Value="{Binding DataContext.TicketTypes, ElementName=ticketsRoot}" />
                        </Style>
                    </DataGridComboBoxColumn.EditingElementStyle>
                </DataGridComboBoxColumn>
                <DataGridTextColumn MinWidth="60" Header="Aantal" Binding="{Binding Amount,ValidatesOnDataErrors=True}">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="DataGridCell.ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self},
                                                Path=(Validation.Errors)[0].ErrorContent}"/>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
            </DataGrid.Columns>
        </DataGrid>
        <TextBlock x:Name="txtVerkocht" Margin="82,14,10,10" Grid.Row="2" TextWrapping="Wrap" Text="{Binding SelectedTicketType.TicketsSold}" TextAlignment="Right" FontSize="17" Foreground="Black"/>
        <TextBlock Margin="96,14.2,10,10.4" Grid.Row="3" TextWrapping="Wrap" Text="{Binding SelectedTicketType.AvailableTickets}" Foreground="Black" FontSize="17" TextAlignment="Right"/>
        <Grid Visibility="{Binding DialogVisibility}" Grid.ColumnSpan="2" Grid.RowSpan="5" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="#7F808080">
            <Border HorizontalAlignment="Stretch" MaxWidth="300" MaxHeight="500" BorderBrush="{StaticResource MyLightBlue}" BorderThickness="1" CornerRadius="4" VerticalAlignment="Stretch" Background="{StaticResource MyBlack}">
                <Grid  >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition/>
                        <RowDefinition Height="auto"/>
                    </Grid.RowDefinitions>
                    <TextBlock Margin="5 5 5 5" VerticalAlignment="Center" Grid.Row="0" Text="Beheer type tickets" Foreground="{StaticResource MyLightBlue}" FontSize="18"/>
                    <DataGrid IsEnabled="{Binding IsTypesEnabled}" BorderBrush="{StaticResource MyLightBlue}" AutoGenerateColumns="False"  ItemsSource="{Binding TicketTypes}" BorderThickness="0,2" ColumnWidth="*" Margin="0,0,0,0" Grid.Row="1" RowHeaderWidth="0" CanUserDeleteRows="False" FontSize="14" RowHeight="24">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Ticket types" Binding="{Binding Name,ValidatesOnDataErrors=True}">
                                <DataGridTextColumn.HeaderStyle>
                                    <Style TargetType="DataGridColumnHeader">
                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                    </Style>
                                </DataGridTextColumn.HeaderStyle>
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="DataGridCell.ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self},
                                                Path=(Validation.Errors)[0].ErrorContent}"/>
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                        </DataGrid.Columns>

                    </DataGrid>
                    <StackPanel HorizontalAlignment="Right" Orientation="Horizontal" Grid.Row="2">
                        <Button Command="{Binding SubmitDialogResultCommand}" Padding="4 3 4 3" Margin="0 5 10 5" Content="Sluit" IsDefault="True"/>
                        <!--<Button Command="{Binding CancelDialogCommand}" Padding="4 3 4 3" Margin="0 5 10 5"  Content="Annuleer" IsCancel="True"/>-->
                    </StackPanel>
                </Grid>
                <!--<View:RequestStringDialog Width="273"  />-->
            </Border>
        </Grid>
    </Grid>
</UserControl>
