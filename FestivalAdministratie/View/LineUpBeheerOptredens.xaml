<UserControl x:Class="FestivalAdministratie.View.LineUpBeheerOptredens"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
              xmlns:xwpf="http://schemas.xceed.com/wpf/xaml/toolkit"
             xmlns:ViewModel="clr-namespace:FestivalAdministratie.ViewModel"
             xmlns:Converter="clr-namespace:FestivalAdministratie.Converter"
             mc:Ignorable="d" 
             Background="White"
             d:DesignHeight="600" d:DesignWidth="800">
    <UserControl.Resources>
        <Style TargetType="{x:Type xwpf:TimePicker}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type xwpf:TimePicker}">
                        <Border >
                            <Grid>
                                <Grid x:Name="rootGrid">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <xwpf:DateTimeUpDown x:Name="PART_TimeUpDown" AllowSpin="{TemplateBinding AllowSpin}" BorderThickness="1,1,0,1" Background="{TemplateBinding Background}" ContextMenu="{TemplateBinding ContextMenu}" Foreground="{TemplateBinding Foreground}" FormatString="{TemplateBinding FormatString}" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" TextAlignment="{TemplateBinding TextAlignment}" Text="" TabIndex="{TemplateBinding TabIndex}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}">
                                        <xwpf:DateTimeUpDown.Format>
                                            <TemplateBinding Property="Format">
                                                <TemplateBinding.Converter>
                                                    <xwpf:TimeFormatToDateTimeFormatConverter/>
                                                </TemplateBinding.Converter>
                                            </TemplateBinding>
                                        </xwpf:DateTimeUpDown.Format>
                                    </xwpf:DateTimeUpDown>
                                    <ToggleButton x:Name="_timePickerToggleButton" Grid.Column="1" Focusable="False" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                        <ToggleButton.IsHitTestVisible>
                                            <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <xwpf:InverseBoolConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </ToggleButton.IsHitTestVisible>
                                        <ToggleButton.Style>
                                            <Style TargetType="{x:Type ToggleButton}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                            <Grid SnapsToDevicePixels="True">
                                                                <xwpf:ButtonChrome x:Name="ToggleButtonChrome" CornerRadius="0" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xwpf:TimePicker}}}" RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xwpf:TimePicker}}}">
                                                                    <Grid>
                                                                        <Grid.ColumnDefinitions>
                                                                            <ColumnDefinition Width="*"/>
                                                                            <ColumnDefinition Width="Auto"/>
                                                                        </Grid.ColumnDefinitions>
                                                                        <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
                                                                        <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5">
                                                                            <Path x:Name="Arrow" Data="M0,1C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1z" Fill="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" Height="4" Width="7"/>
                                                                        </Grid>
                                                                    </Grid>
                                                                </xwpf:ButtonChrome>
                                                            </Grid>
                                                            <ControlTemplate.Triggers>
                                                                <Trigger Property="IsEnabled" Value="False">
                                                                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                                </Trigger>
                                                            </ControlTemplate.Triggers>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ToggleButton.Style>
                                    </ToggleButton>
                                </Grid>
                                <Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}" StaysOpen="False">
                                    <Border BorderBrush="#FFABADB3" BorderThickness="1">
                                        <Border.Background>
                                            <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                                <GradientStop Color="#FFF0F0F0" Offset="0"/>
                                                <GradientStop Color="#FFE5E5E5" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Border.Background>
                                        <Grid MinWidth="{Binding ElementName=rootGrid,Path=ActualWidth}">
                                            <ListBox  x:Name="PART_TimeListItems" BorderThickness="0" DisplayMemberPath="Display" Height="130" Width="auto">
                                                <ListBox.ItemContainerStyle>
                                                    <Style TargetType="{x:Type ListBoxItem}">
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                    <Border x:Name="Border" BorderThickness="1" SnapsToDevicePixels="True">
                                                                        <ContentPresenter Margin="4"/>
                                                                    </Border>
                                                                    <ControlTemplate.Triggers>
                                                                        <MultiTrigger>
                                                                            <MultiTrigger.Conditions>
                                                                                <Condition Property="IsMouseOver" Value="True"/>
                                                                                <Condition Property="IsSelected" Value="False"/>
                                                                            </MultiTrigger.Conditions>
                                                                            <Setter Property="Background" TargetName="Border" Value="#FFB8E0F3"/>
                                                                            <Setter Property="BorderBrush" TargetName="Border" Value="#FF26A0DA"/>
                                                                        </MultiTrigger>
                                                                        <MultiTrigger>
                                                                            <MultiTrigger.Conditions>
                                                                                <Condition Property="IsMouseOver" Value="False"/>
                                                                                <Condition Property="IsSelected" Value="True"/>
                                                                            </MultiTrigger.Conditions>
                                                                            <Setter Property="Background" TargetName="Border" Value="#FFC4E5F6"/>
                                                                            <Setter Property="BorderBrush" TargetName="Border" Value="#FF26A0DA"/>
                                                                        </MultiTrigger>
                                                                        <MultiTrigger>
                                                                            <MultiTrigger.Conditions>
                                                                                <Condition Property="IsMouseOver" Value="True"/>
                                                                                <Condition Property="IsSelected" Value="True"/>
                                                                            </MultiTrigger.Conditions>
                                                                            <Setter Property="Background" TargetName="Border" Value="#FFD1E8FF"/>
                                                                            <Setter Property="BorderBrush" TargetName="Border" Value="#FF66A7E8"/>
                                                                        </MultiTrigger>
                                                                    </ControlTemplate.Triggers>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </ListBox.ItemContainerStyle>
                                            </ListBox>
                                        </Grid>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="FocusManager.FocusedElement" TargetName="PART_TimeUpDown" Value="{Binding ElementName=PART_TimeUpDown}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid>
        <StackPanel VerticalAlignment="Top" Orientation="Horizontal" Margin="10,10,0,0" Height="30">
            <Label Content="Band:" HorizontalAlignment="Left" Width="48" Padding="5,6,5,0" Margin="0,0,0,0.4"/>
            <ComboBox DisplayMemberPath="Name" IsEnabled="{Binding IsAnItemSelected}" VerticalAlignment="Top" Width="130" Margin="2,0,0,0" Grid.Column="1" ItemsSource="{Binding Bands}" SelectedItem="{Binding SelectedItem.Band}"/>
        </StackPanel>
        <StackPanel VerticalAlignment="Top" Orientation="Horizontal" Margin="10,83,0,0" Height="30">
            <Label Content="Stage:" HorizontalAlignment="Left" Width="48" Padding="5,6,5,0" Margin="0,0,0,0.4"/>
            <ComboBox DisplayMemberPath="Name" IsEnabled="{Binding IsAnItemSelected}" VerticalAlignment="Top" Width="130" Margin="2,0,0,0" Grid.Column="1" ItemsSource="{Binding Stages}" SelectedItem="{Binding SelectedItem.Stage}"/>
        </StackPanel>
        <StackPanel VerticalAlignment="Top" Orientation="Horizontal" Margin="10,48,0,0" Height="30">
            <Label Content="Dag:" HorizontalAlignment="Left" Width="48" Padding="5,6,5,0" Margin="0,0,0,0.4"/>
            <ComboBox DisplayMemberPath="Dag" ItemStringFormat="dd" IsEnabled="{Binding IsAnItemSelected}" VerticalAlignment="Top" Width="130" Margin="2,0,0,0" Grid.Column="1" ItemsSource="{Binding Dagen}" SelectedItem="{Binding SelectedItem.LineUp}"/>
        </StackPanel>
        <Grid VerticalAlignment="Top" Margin="10,125,0,0" Height="30">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="104.8"/>
                <ColumnDefinition Width="Auto" MinWidth="40"/>
                <ColumnDefinition Width="339.2"/>
            </Grid.ColumnDefinitions>
            <Label Content="Optreden van" Height="27" VerticalAlignment="Top" HorizontalAlignment="Left" Width="95" Margin="1,3,0,0"/>
            <TextBlock Text="tot" Margin="0,3,6,0" Grid.Column="2" TextAlignment="Center" Padding="0,5,0,0" />
            <xwpf:TimePicker x:Name="From" IsEnabled="{Binding IsAnItemSelected}" Margin="95,0,0,0" Grid.ColumnSpan="2" HorizontalAlignment="Left" Width="100" Value="{Binding SelectedItem.From,ValidatesOnDataErrors=True}" TimeInterval="0:30:0" TextAlignment="Center"/>
            <xwpf:TimePicker x:Name="Until" IsEnabled="{Binding IsAnItemSelected}" Margin="1,0,0,0" Grid.Column="3" Width="100" HorizontalAlignment="Left" Value="{Binding SelectedItem.Until,ValidatesOnDataErrors=True}" TimeInterval="0:30:0" TextAlignment="Center"/>

        </Grid>

    </Grid>
</UserControl>
